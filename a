--- lowlevellock.c	2015-07-28 15:00:20.199335090 -0500
+++ ./bak/lowlevellock.c	2015-07-30 17:08:51.243335052 -0500
@@ -22,7 +22,6 @@
 #include <lowlevellock.h>
 #include <sys/time.h>
 #include <atomic.h>
-#include <pthreadP.h>
 
 void
 __lll_lock_wait_private (int *futex)
@@ -36,7 +35,7 @@
 
 
 /* This function doesn't get included in libc.  */
-//#if IS_IN (libpthread)
+#if IS_IN (libpthread)
 void
 __lll_lock_wait (int *futex, int private)
 {
@@ -46,40 +45,4 @@
   while (atomic_exchange_acq (futex, 2) != 0)
     lll_futex_wait (futex, 2, private); /* Wait if *futex == 2.  */
 }
-//#endif
-
-//mejbah added
-int
-__lll_robust_lock_wait (int *futex, int private)
-{
-      int oldval = *futex;
-        int tid = THREAD_GETMEM (THREAD_SELF, tid);
-
-          /* If the futex changed meanwhile try locking again.  */
-          if (oldval == 0)
-                  goto try;
-
-            do
-                    {
-                              /* If the owner died, return the present value of the futex.  */
-                              if (__glibc_unlikely (oldval & FUTEX_OWNER_DIED))
-                                      return oldval;
-
-                                    /* Try to put the lock into state 'acquired, possibly with waiters'.  */
-                                    int newval = oldval | FUTEX_WAITERS;
-                                          if (oldval != newval
-                                                        && atomic_compare_and_exchange_bool_acq (futex, newval, oldval))
-                                                  continue;
-
-                                                /* If *futex == 2, wait until woken.  */
-                                                lll_futex_wait (futex, newval, private);
-
-                                                    try:
-                                                      ;
-                                                          }
-              while ((oldval = atomic_compare_and_exchange_val_acq (futex,
-                                                          tid | FUTEX_WAITERS,
-                                                                                      0)) != 0);
-              return 0;
-}
-
+#endif
